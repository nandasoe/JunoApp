import * as React from "react"
import { Frame, addPropertyControls, ControlType, transform } from "framer"

export function Animation({
    duration,
    delay,
    loop,
    isSpring,
    stiffness,
    damping,
    mass,
    loopAmount,
    easeString,
    easePreset,
    easeCustom,
    repeatDelay,
    restSpeed,
    restDelta,
    yoyo,
    yoyoAmount,
}) {
    const [transition, setTransition] = React.useState("spring")
    const easeCubicBezier = easeCustom.split(",").map(Number)

    const springTransition = {
        type: "spring",
        stiffness: stiffness,
        damping: damping,
        mass: mass,
        restSpeed,
        restDelta,
        delay: delay,
    }

    const tweenTransition = {
        type: "tween",
        ease: easeString ? easePreset : easeCubicBezier,
        duration: duration,
        delay: delay,
        loop: loop ? loopAmount : Infinity,
        yoyo: yoyo ? yoyoAmount : Infinity,
        repeatDelay: repeatDelay,
    }

    return (
        <Frame
            size={150}
            radius={32}
            backgroundColor={"#FFF"}
            center={true}
            animate={{ rotate: 180 }}
            transition={isSpring ? springTransition : tweenTransition}
        />
    )
}

Animation.defaultProps = {
    duration: 1,
    delay: 0,
    isSpring: true,
    loop: true,
    stiffness: 200,
    damping: 20,
    mass: 1,
    loopAmount: 0,
    yoyo: true,
    yoyoAmount: 0,
    easeString: true,
    easePreset: "ease",
    easeCustom: "0.645, 0.045, 0.355, 1",
    repeatDelay: 0,
    restSpeed: 0.01,
    restDelta: 0.01,
}

addPropertyControls(Animation, {
    isSpring: {
        type: ControlType.Boolean,
        title: "Type",
        enabledTitle: "Spring",
        disabledTitle: "Ease",
    },
    easeString: {
        type: ControlType.Boolean,
        title: "Ease",
        enabledTitle: "Preset",
        disabledTitle: "Custom",
        hidden(props) {
            return props.isSpring === true
        },
    },
    easeCustom: {
        type: ControlType.String,
        title: "Bezier",
        placeholder: "Cubic Bezier Values",
        hidden(props) {
            return props.isSpring === true || props.easeString === true
        },
    },
    easePreset: {
        type: ControlType.Enum,
        title: "Presets",
        defaultValue: "easeInOut",
        options: [
            "linear",
            "easeIn",
            "easeOut",
            "easeInOut",
            "circIn",
            "circOut",
            "circInOut",
            "backIn",
            "backOut",
            "backInOut",
            "anticipate",
        ],
        optionTitles: [
            "Linear",
            "Ease In",
            "Ease Out",
            "Ease In Out",
            "Circ In",
            "Circ Out",
            "Circ In Out",
            "Back In",
            "Back Out",
            "Back In Out",
            "Anticipate",
        ],
        hidden(props) {
            return props.isSpring === true || props.easeString === false
        },
    },
    duration: {
        type: ControlType.Number,
        title: "Duration",
        min: 0,
        max: 10,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === true
        },
    },
    stiffness: {
        type: ControlType.Number,
        title: "Stiffness",
        min: 0,
        max: 1000,
        hidden(props) {
            return props.isSpring === false
        },
    },
    damping: {
        type: ControlType.Number,
        title: "Damping",
        min: 0,
        max: 100,
        hidden(props) {
            return props.isSpring === false
        },
    },
    mass: {
        type: ControlType.Number,
        title: "Mass",
        min: 0,
        max: 100,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === false
        },
    },
    restSpeed: {
        type: ControlType.Number,
        title: "RestSpeed",
        min: 0,
        max: 1,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === false
        },
    },
    restDelta: {
        type: ControlType.Number,
        title: "RestDelta",
        min: 0,
        max: 1,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === false
        },
    },
    delay: {
        type: ControlType.Number,
        title: "Delay",
        min: 0,
        max: 10,
        displayStepper: true,
        step: 0.1,
    },
    loop: {
        type: ControlType.Boolean,
        title: "Loop",
        enabledTitle: "Amount",
        disabledTitle: "Infinity",
        hidden(props) {
            return props.isSpring === true
        },
    },
    loopAmount: {
        type: ControlType.Number,
        title: "↳ Amount",
        min: 0,
        max: 10,
        displayStepper: true,
        hidden(props) {
            return props.loop === false || props.isSpring === true
        },
    },
    yoyo: {
        type: ControlType.Boolean,
        title: "Yoyo",
        enabledTitle: "Amount",
        disabledTitle: "Infinity",
        hidden(props) {
            return props.isSpring === true
        },
    },
    yoyoAmount: {
        type: ControlType.Number,
        title: "↳ Amount",
        min: 0,
        max: 10,
        displayStepper: true,
        hidden(props) {
            return props.yoyo === false || props.isSpring === true
        },
    },
    repeatDelay: {
        type: ControlType.Number,
        title: "LoopDelay",
        min: 0,
        max: 20,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === true
        },
    },
})
