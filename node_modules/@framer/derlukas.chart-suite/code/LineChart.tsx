import * as React from "react"
import { useState, useEffect } from "react"
import { Frame, addPropertyControls, ControlType } from "framer"
import { colors } from "./canvas"
import { CsvToHtmlTable } from "react-csv-to-table"
import * as Papa from "papaparse"
import {
    LineChart,
    Line,
    XAxis,
    YAxis,
    CartesianGrid,
    Tooltip,
    Legend,
} from "recharts"

const noChildrenStyle: React.CSSProperties = {
    height: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    color: "#8855FF",
    background: "rgba(136, 85, 255, 0.1)",
    overflow: "hidden",
    fontSize: 12,
}

const getFileExtension = filename => {
    return filename.split(".").pop()
}

export function LineCharts(props: {
    source: string
    srcUrl: string
    srcFile: string
    debug: boolean
    xAxisVisible: boolean
    xAxisType: string
    xKey: string
    yKey: string
    margin: string
    isPerSide: boolean
    top: number
    left: number
    right: number
    bottom: number
    width: number
    height: number
    lines: any
    lineWidth: number
    showTooltip: boolean
    showLegend: boolean

    showGrid: boolean
    gridStrokeColor: string
    gridDashArray: number

    colors: any
    layout: string
}) {
    const [data, setData] = useState([])
    const [csvData, setCSV] = useState("")

    let sourceItem, sourceType

    if (props.source === "url") {
        sourceItem = props.srcUrl
    } else {
        sourceItem = props.srcFile
    }

    useEffect(() => {
        if (getFileExtension(sourceItem) === "csv") {
            Papa.parse(sourceItem, {
                download: true,
                header: true,
                skipEmptyLines: true,
                complete: function(results) {
                    setData(results.data)
                    setCSV(Papa.unparse(results.data))
                },
            })
        } else {
            fetch(sourceItem)
                .then(response => response.json())
                .then(data => {
                    setData(data)
                    setCSV(Papa.unparse(data))
                })
        }
    }, [sourceItem])

    return sourceItem != "" && data.length > 0 ? (
        props.debug ? (
            <CsvToHtmlTable
                data={csvData}
                csvDelimiter=","
                tableClassName="table table-striped"
            />
        ) : (
            <LineChart
                width={props.width}
                height={props.height}
                data={data}
                layout={props.layout}
                margin={
                    props.isPerSide
                        ? {
                              top: props.top,
                              right: props.right,
                              left: props.left,
                              bottom: props.bottom,
                          }
                        : {
                              top: props.margin,
                              right: props.margin,
                              left: props.margin,
                              bottom: props.margin,
                          }
                }
            >
                {props.xAxisVisible && (
                    <XAxis
                        dataKey={props.xKey ? props.xKey : null}
                        type={props.xAxisType}
                    />
                )}

                {props.showTooltip && <Tooltip />}
                {props.showLegend && <Legend />}
                {props.showGrid && (
                    <CartesianGrid
                        stroke={props.gridStrokeColor}
                        strokeDasharray={props.gridDashArray.toString()}
                    />
                )}

                {props.lines.map((line, index) => {
                    return (
                        <Line
                            key={index}
                            type="monotone"
                            dataKey={line}
                            stroke={
                                props.colors &&
                                (props.colors[index]
                                    ? props.colors[index]
                                    : "#0099FF")
                            }
                            strokeWidth={props.lineWidth}
                            // yAxisId={index}
                        />
                    )
                })}
            </LineChart>
        )
    ) : (
        <div style={noChildrenStyle}>No data</div>
    )
}

let presetColors = []
const colorsTokens = Object.keys(colors).map(key =>
    presetColors.push(colors[key])
)

LineCharts.defaultProps = {
    source: "file",
    srcUrl: "",
    srcFile: "",
    debug: false,

    // X Axis
    xAxisVisible: true,
    xAxisType: "category",
    xName: null,

    margin: 5,
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    lines: [],
    lineWidth: 1,
    theme: "",
    showTooltip: true,
    showLegend: true,

    // Grid
    showGrid: true,
    gridStrokeColor: "#f5f5f5",
    gridDashArray: 0,

    layout: "horizontal",

    colors: presetColors,
}

addPropertyControls(LineCharts, {
    source: {
        type: ControlType.Enum,
        options: ["file", "url"],
        optionTitles: ["File", "URL"],
        title: "Data Source",
    },
    srcFile: {
        type: ControlType.File,
        allowedFileTypes: ["csv", "json"],
        title: "⌙ File",
        hidden(props) {
            return props.source === "url"
        },
    },
    srcUrl: {
        type: ControlType.String,
        title: "⌙ URL",
        hidden(props) {
            return props.source === "file"
        },
    },
    margin: {
        type: ControlType.FusedNumber,
        toggleKey: "isPerSide",
        toggleTitles: ["string", "string"],
        valueKeys: ["top", "left", "right", "bottom"],
        valueLabels: ["T", "L", "R", "B"],
        title: "Margin",
        min: 0,
        defaultValue: 0,
    },
    debug: {
        type: ControlType.Boolean,
        title: "Debug",
    },
    showTooltip: {
        type: ControlType.Boolean,
        title: "Tooltip",
        defaultValue: false,
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },
    showLegend: {
        type: ControlType.Boolean,
        title: "Legend",
        defaultValue: false,
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },

    // Grid
    showGrid: {
        type: ControlType.Boolean,
        title: "Grid",
        defaultValue: false,
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },
    gridStrokeColor: {
        type: ControlType.Color,
        title: "⌙ Grid Color",
        hidden(props) {
            return props.showGrid === false
        },
    },
    gridDashArray: {
        type: ControlType.Number,
        title: "⌙ Grid Dashes",
        hidden(props) {
            return props.showGrid === false
        },
    },

    // X Axis
    xAxisVisible: {
        type: ControlType.Boolean,
        defaultValue: true,
        enabledTitle: "Show",
        disabledTitle: "Hide",
        title: "X Axis",
    },
    xKey: {
        type: ControlType.String,
        title: "⌙ X Axis Key",
        hidden(props) {
            return props.xAxisVisible === false
        },
    },

    lines: {
        type: ControlType.Array,
        title: "Lines",
        propertyControl: {
            type: ControlType.String,
        },
    },
    lineWidth: {
        type: ControlType.Number,
        title: "Line Width",
        min: 1,
        max: 5,
    },
    colors: {
        type: ControlType.Array,
        title: "Chart Colors",
        propertyControl: {
            type: ControlType.Color,
        },
    },
})
