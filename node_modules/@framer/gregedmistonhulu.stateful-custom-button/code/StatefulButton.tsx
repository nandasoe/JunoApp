import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import styled from "styled-components";

interface Props {
  normalFrame: any;
  hoverFrame: any;
  focusFrame: any;
  activeFrame: any;
  disabledFrame: any;
  initialStateEnabled: string;
  state: string;
  width: number;
  height: number;
}

export class StatefulButton extends React.Component<Props> {
  private StatefulButtonContainerRef: React.RefObject<HTMLButtonElement>;
  private forceActiveAppearanceTimer: number;
  private isMouseDown; /* JS tracking of pressed state to mitigate CSS :active bugs */
  private isTouchDown;

  static defaultProps = {
    normalFrame: undefined,
    hoverFrame: undefined,
    focusFrame: undefined,
    activeFrame: undefined,
    disabledFrame: undefined,
    initialStateEnabled: 'Enabled',
    width: 200,
    height: 100
  };

  static propertyControls: PropertyControls = {
    normalFrame: { type: ControlType.ComponentInstance, title: "Normal (req)" },
    hoverFrame: { type: ControlType.ComponentInstance, title: ":hover" },
    focusFrame: { type: ControlType.ComponentInstance, title: ":focus" },
    activeFrame: { type: ControlType.ComponentInstance, title: ":active" },
    disabledFrame: { type: ControlType.ComponentInstance, title: ":disabled" },
    initialStateEnabled: {
      type: ControlType.SegmentedEnum,
      title: "Initial State",
      options: [
        'Enabled',
        'Disabled'
      ]
    }
  };


  constructor(props) {
    super(props);

    this.StatefulButtonContainerRef = React.createRef<HTMLButtonElement>();

    this.handleMouseDown = this.handleMouseDown.bind(this);
    this.handleMouseUp = this.handleMouseUp.bind(this);
    this.handleMouseEnter = this.handleMouseEnter.bind(this);
    this.handleMouseLeave = this.handleMouseLeave.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleTouchStart = this.handleTouchStart.bind(this);
    this.handleTouchEnd = this.handleTouchStart.bind(this);
    this.handleTouchCancel = this.handleTouchStart.bind(this);
    this.handleFocus = this.handleFocus.bind(this);
    this.handleBlur = this.handleBlur.bind(this);

    this.onTap = this.onTap.bind(this);

    this.isMouseDown = false;
    this.isTouchDown = false;
  }


  /* Click handler */

  onTap(evt: Event) {
    // TODO: Do something more interesting here!
    console.log('clicked');
  }


/* Other event handlers to manage pressed state */
  
  private handleMouseDown(evt: Event) {
    this.isMouseDown = true;
    this.StatefulButtonContainerRef.current.classList.add('active');
    this.startForceActiveAppearance();
  }

  private handleMouseEnter(evt: Event) {
    if (this.isMouseDown) {
      this.StatefulButtonContainerRef.current.classList.add('active');
    } else {
      this.StatefulButtonContainerRef.current.classList.remove('active');
    }
  }

  private handleTouchStart(evt: Event) {
    this.isMouseDown = true;
    this.isTouchDown = true;
    this.StatefulButtonContainerRef.current.classList.add('active');
    this.StatefulButtonContainerRef.current.classList.add('fromTouch');
  }

  private handleTouchEnd(evt: Event) {
    this.StatefulButtonContainerRef.current.classList.remove('active');
    this.isTouchDown = false;
  }

  private handleTouchCancel(evt: Event) {
    this.StatefulButtonContainerRef.current.classList.remove('active');
    this.isTouchDown = false;
  }

  private handleMouseLeave(evt: Event) {
    this.StatefulButtonContainerRef.current.classList.remove('active');
    this.StatefulButtonContainerRef.current.classList.remove('fromTouch');
  }

  private handleMouseUp(evt: Event) {
    this.StatefulButtonContainerRef.current.classList.remove('active');
    this.isMouseDown = false;
  }

  private handleFocus(evt: Event) {
    if (this.isMouseDown) {
      this.StatefulButtonContainerRef.current.classList.add('focusFromMouseClick');
    } else {
      this.StatefulButtonContainerRef.current.classList.remove('focusFromMouseClick');
    }
  }
  private handleBlur(evt: Event) {
    this.StatefulButtonContainerRef.current.classList.remove('focusFromMouseClick');
  }

  private startForceActiveAppearance() {
    this.abortForceActiveAppearance();
    this.StatefulButtonContainerRef.current.classList.add('active');
    let self = this;
    this.forceActiveAppearanceTimer = setTimeout(() => {
      if (!self.isMouseDown) self.StatefulButtonContainerRef.current.classList.remove('active');
    }, 100);
  }

  private abortForceActiveAppearance() {
    clearTimeout(this.forceActiveAppearanceTimer);
    this.StatefulButtonContainerRef.current.classList.remove('active');
  }

  private handleKeyDown(evt: KeyboardEvent) {
    switch (evt.which) {
      case 32: 
      case 13: 
        this.startForceActiveAppearance();
        /* onClick will be triggered automatically through browser synthetic events on a <button> */
        break;
    }
  }


  /* Helper */

  private getFrameByName(propName) {
    return this.props[propName] &&
      this.props[propName].length &&
      this.props[propName].length > 0
      ? this.props[propName]
      : false;
  }


  /* Render functions */

  private renderChildren(prop) {
    let childRender = React.Children.map(prop, child => {
      if (child === null || typeof child !== "object") {
        return <></>;
      } else {

        let styleStretch: React.CSSProperties = {
          position: "absolute",
          left: 0,
          top: 0,
          width: "100%",
          height: "100%"
        };
        const adjustments = {
          top: 0,
          left: 0,
          width: this.props.width,
          height: this.props.height,
          style: styleStretch
        };
        return React.cloneElement(child, adjustments);
      }
    });
    return childRender;
  }

  render() {
    if (!this.getFrameByName("normalFrame")) {
      return (
        <Placeholder>Connect a frame to Normal to get started</Placeholder>
      );
    }

    let hasFocusState = !!(this.getFrameByName("focusFrame"));

    let isDisabled = this.props.initialStateEnabled == 'Disabled'

    return (
      <StatefulButtonContainer
        ref={this.StatefulButtonContainerRef}
        onClick={this.onTap}
        onMouseDown={this.handleMouseDown}
        onMouseUp={this.handleMouseUp}
        onMouseEnter={this.handleMouseEnter}
        onMouseLeave={this.handleMouseLeave}
        onKeyDown={this.handleKeyDown}
        onTouchStart={this.handleTouchStart}
        onTouchEnd={this.handleTouchEnd}
        onTouchCancel={this.handleTouchCancel}
        onFocus={this.handleFocus}
        onBlur={this.handleBlur}
        tabIndex={hasFocusState ? "0" : "-1"}
        disabled={isDisabled}
        role="button"
        componentProps={this.props}
      >

        <NormalFrame>{this.renderChildren(this.props.normalFrame)}</NormalFrame>

        <FocusFrame>{this.renderChildren(this.props.focusFrame)}</FocusFrame>

        <HoverFrame>{this.renderChildren(this.props.hoverFrame)}</HoverFrame>

        <ActiveFrame>{this.renderChildren(this.props.activeFrame)}</ActiveFrame>

        <DisabledFrame>{this.renderChildren(this.props.disabledFrame)}</DisabledFrame>

      </StatefulButtonContainer>
    );
  }
}

const Placeholder = styled.div`
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: center;
  text-align: center;
  overflow: hidden;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.5);
  background-color: rgba(200, 200, 200, 0.5);
  padding: 1em;
`;

const FrameLayer = styled.div`
  position: absolute;
  left: 0;
  top: 0;
  right: 0;
  top: 0;
  width: 100%;
  height: 100%;
`;

const NormalFrame = styled(FrameLayer)``;

const NonDefaultState = styled(FrameLayer)`
  opacity: 0;
  transition: opacity 50ms linear;
`;

const DisabledFrame = styled(NonDefaultState)``;
const ActiveFrame = styled(NonDefaultState)``;
const HoverFrame = styled(NonDefaultState)``;
const FocusFrame = styled(NonDefaultState)``;

const StatefulButtonContainer = styled.button`
  position: absolute;
  left: 0;
  top: 0;
  right: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  appearance: none;
  background: none;
  border: none;
  align-items: normal;
  align-content: normal;
  align-self: auto;
  text-align: left;
  padding: 0;
  margin: 0;
  display: block;
  outline: 0;
  -webkit-tap-highlight-color: transparent;
  tap-highlight-color: transparent;

  ${props => props.componentProps.disabledFrame.length && `
    &:disabled ${FrameLayer} {
      opacity: 0;
    }
    &:disabled ${DisabledFrame} {
      opacity: inherit;
    }
  `}

  ${props => props.componentProps.focusFrame.length && `
    &:not(.focusFromMouseClick):not(:disabled):focus ${FrameLayer} {
      opacity: 0; 
    }
    &:not(.focusFromMouseClick):not(:disabled):focus ${FocusFrame} {
      opacity: inherit;
      outline: 0;
    }
  `}

  ${props => props.componentProps.hoverFrame.length && `
    &:not(.fromTouch):not(:disabled):hover ${FrameLayer} {
      opacity: 0; 
    }
    &:not(.fromTouch):not(:disabled):hover ${HoverFrame} {
      opacity: inherit;
    }
  `}

  ${props => props.componentProps.activeFrame.length && `
    &[role="button"]:not(:disabled).active ${FrameLayer} {
      opacity: 0; 
    }
    &[role="button"]:not(:disabled).active ${ActiveFrame} {
      opacity: inherit;
    }
  `}
}
`;
