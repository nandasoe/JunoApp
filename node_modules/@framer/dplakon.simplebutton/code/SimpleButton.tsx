import * as React from "react"
import {
    PropertyControls,
    ControlType,
    Frame,
    Animatable,
    animate,
} from "framer"
// import { BoxShadow, Shadow } from "framer/types/src/render"
import styled, { injectGlobal } from "styled-components"

injectGlobal`
  @import url('https://fonts.googleapis.com/icon?family=Material+Icons');
`

const style: React.CSSProperties = {
    backgroundColor: "rgba(255,255,255,0)",
}

const IconContainer = styled<Props, any>("span")`
    font-size: ${props => props.fontSize}px;
    margin-right: ${props => Number(props.fontSize) / 2}px;
`

// Define type of property
interface Props {
    text: string
    width: number
    height: number
    buttonState: "state1" | "state2" | "state3"
    state1Fill: string
    state1Bord: string
    state1Text: string
    state2Fill: string
    state2Bord: string
    state2Text: string
    state3Fill: string
    state3Bord: string
    state3Text: string
    radius: number
    fontSize: number
    shadowX1: number
    shadowY1: number
    shadowSpread1: number
    shadowBlur1: number
    shadowColor1: string
    shadowX2: number
    shadowY2: number
    shadowSpread2: number
    shadowBlur2: number
    shadowColor2: string
    shadowX3: number
    shadowY3: number
    shadowSpread3: number
    shadowBlur3: number
    shadowColor3: string
    isIcon: boolean
    icon: string
    isToggle: boolean
}

interface State {
    hover: boolean
    isClicked: boolean
    Toggled: boolean
    status: "state1" | "state2" | "state3"
}

export class SimpleButton extends React.Component<Partial<Props>, State> {
    constructor(props) {
        super(props)
        this.toggleHover = this.toggleHover.bind(this)
        this.handleClickDown = this.handleClickDown.bind(this)
        this.handleClickUp = this.handleClickUp.bind(this)
        this.state = {
            hover: false,
            status: "state1",
            isClicked: false,
            Toggled: false,
        }
    }

    // Set default properties
    static defaultProps: Props = {
        text: "Submit",
        width: 280,
        height: 60,
        buttonState: "state1",
        state1Fill: "#05f",
        state1Bord: "#05f",
        state1Text: "white",
        state2Fill: "#07f",
        state2Bord: "#07f",
        state2Text: "white",
        state3Fill: "#02f",
        state3Bord: "#02f",
        state3Text: "white",
        radius: 5,
        fontSize: 20,
        shadowX1: 0,
        shadowY1: 5,
        shadowSpread1: 0,
        shadowBlur1: 18,
        shadowColor1: "rgba(0,0,0,.3)",
        shadowX2: 0,
        shadowY2: 8,
        shadowSpread2: 0,
        shadowBlur2: 25,
        shadowColor2: "rgba(0,0,0,.4)",
        shadowX3: 0,
        shadowY3: 5,
        shadowSpread3: 0,
        shadowBlur3: 18,
        shadowColor3: "rgba(0,0,0,.3)",
        isIcon: false,
        icon: "touch_app",
        isToggle: false,
    }

    // Items shown in property panel
    static propertyControls: PropertyControls<Props> = {
        text: { type: ControlType.String, title: "Text" },
        isIcon: { type: ControlType.Boolean, title: "Show Icon" },
        icon: {
            type: ControlType.String,
            hidden: props => !props.isIcon,
            title: "Icon Name",
        },
        isToggle: { type: ControlType.Boolean, title: "Toggle?" },
        fontSize: { type: ControlType.Number, title: "Font Size" },
        radius: { type: ControlType.Number, title: "Radius" },
        buttonState: {
            type: ControlType.Enum,
            options: ["state1", "state2", "state3"],
            optionTitles: ["Default", "Hover", "Down"],
            title: "Button State",
        },
        state1Fill: {
            type: ControlType.Color,
            title: "Fill",
            hidden(props) {
                if (
                    props.buttonState != "state2" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        state1Bord: {
            type: ControlType.Color,
            title: "Border",
            hidden(props) {
                if (
                    props.buttonState != "state2" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        state1Text: {
            type: ControlType.Color,
            title: "Text",
            hidden(props) {
                if (
                    props.buttonState != "state2" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowX1: {
            type: ControlType.Number,
            title: "Shadow X",
            hidden(props) {
                if (
                    props.buttonState != "state2" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowY1: {
            type: ControlType.Number,
            title: "Shadow Y",
            hidden(props) {
                if (
                    props.buttonState != "state2" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowBlur1: {
            type: ControlType.Number,
            title: "Blur",
            hidden(props) {
                if (
                    props.buttonState != "state2" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowSpread1: {
            type: ControlType.Number,
            title: "Spread",
            hidden(props) {
                if (
                    props.buttonState != "state2" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowColor1: {
            type: ControlType.Color,
            title: "Color",
            hidden(props) {
                if (
                    props.buttonState != "state2" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        state2Fill: {
            type: ControlType.Color,
            title: "Fill",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        state2Bord: {
            type: ControlType.Color,
            title: "Border",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        state2Text: {
            type: ControlType.Color,
            title: "Text",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowX2: {
            type: ControlType.Number,
            title: "Shadow X",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowY2: {
            type: ControlType.Number,
            title: "Shadow Y",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowBlur2: {
            type: ControlType.Number,
            title: "Blur",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowSpread2: {
            type: ControlType.Number,
            title: "Spread",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowColor2: {
            type: ControlType.Color,
            title: "Color",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state3"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        state3Fill: {
            type: ControlType.Color,
            title: "Fill",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state2"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        state3Bord: {
            type: ControlType.Color,
            title: "Border",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state2"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        state3Text: {
            type: ControlType.Color,
            title: "Text",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state2"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowX3: {
            type: ControlType.Number,
            title: "Shadow X",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state2"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowY3: {
            type: ControlType.Number,
            title: "Shadow Y",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state2"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowBlur3: {
            type: ControlType.Number,
            title: "Blur",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state2"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowSpread3: {
            type: ControlType.Number,
            title: "Spread",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state2"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
        shadowColor3: {
            type: ControlType.Color,
            title: "Color",
            hidden(props) {
                if (
                    props.buttonState != "state1" &&
                    props.buttonState != "state2"
                ) {
                    return false
                } else {
                    return true
                }
            },
        },
    }

    toggleHover() {
        this.setState({ hover: !this.state.hover })
        if (this.state.hover === true) {
            if (this.props.isToggle === true) {
                this.state.Toggled
                    ? this.setState({ status: "state3" })
                    : this.setState({ status: "state1" })
            } else {
                this.setState({ status: "state1" })
            }
        } else {
            this.setState({ status: "state2" })
        }
    }

    handleClickDown() {
        this.setState({ Toggled: !this.state.Toggled })
        this.setState({ isClicked: !this.state.isClicked })
        if (this.state.isClicked === true) {
            this.setState({ status: "state2" })
        } else {
            this.setState({ status: "state3" })
        }
    }
    handleClickUp() {
        this.setState({ isClicked: !this.state.isClicked })
        if (this.state.isClicked === true) {
            this.setState({ status: "state2" })
        } else {
            this.setState({ status: "state3" })
        }
    }

    render() {
        const {
            width,
            height,
            text,
            buttonState,
            state1Fill,
            state1Bord,
            state1Text,
            state2Bord,
            state2Fill,
            state2Text,
            state3Fill,
            state3Bord,
            state3Text,
            radius,
            fontSize,
            shadowX1,
            shadowY1,
            shadowBlur1,
            shadowSpread1,
            shadowColor1,
            shadowX2,
            shadowY2,
            shadowBlur2,
            shadowSpread2,
            shadowColor2,
            shadowX3,
            shadowY3,
            shadowBlur3,
            shadowSpread3,
            shadowColor3,
            icon,
            isIcon,
        } = this.props

        let buttonbg = "rgba(155,155,155,1)"
        let textcolor = "rgba(155,155,155,1)"
        let bordercolor = "rgba(155,155,155,1)"
        let shadow =
            shadowX1 +
            "px " +
            shadowY1 +
            "px " +
            shadowBlur1 +
            "px " +
            shadowSpread1 +
            "px " +
            shadowColor1

        switch (this.state.status) {
            case "state1":
                buttonbg = state1Fill
                textcolor = state1Text
                bordercolor = state1Bord
                shadow =
                    shadowX1 +
                    "px " +
                    shadowY1 +
                    "px " +
                    shadowBlur1 +
                    "px " +
                    shadowSpread1 +
                    "px " +
                    shadowColor1
                break
            case "state2":
                buttonbg = state2Fill
                textcolor = state2Text
                bordercolor = state2Bord
                shadow =
                    shadowX2 +
                    "px " +
                    shadowY2 +
                    "px " +
                    shadowBlur2 +
                    "px " +
                    shadowSpread2 +
                    "px " +
                    shadowColor2
                break
            case "state3":
                buttonbg = state3Fill
                textcolor = state3Text
                bordercolor = state3Bord
                shadow =
                    shadowX3 +
                    "px " +
                    shadowY3 +
                    "px " +
                    shadowBlur3 +
                    "px " +
                    shadowSpread3 +
                    "px " +
                    shadowColor3
                break
        }
        const buttonStyle: React.CSSProperties = {
            height: "100%",
            width: "100%",
            borderRadius: radius,
            fontSize: fontSize,
            borderColor: bordercolor,
            fontFamily: "Noto Sans, sans-serif",
            fontWeight: "bold",
            color: textcolor,
            backgroundColor: buttonbg,
            borderWidth: 1,
            borderStyle: "solid",
            boxShadow: shadow,
        }

        return (
            <Frame width={width} height={height} style={style}>
                <button
                    style={buttonStyle}
                    onMouseEnter={this.toggleHover}
                    onMouseLeave={this.toggleHover}
                    onMouseDown={this.handleClickDown}
                    onMouseUp={this.handleClickUp}
                >
                    {isIcon && (
                        <IconContainer
                            fontSize={fontSize}
                            className="material-icons"
                        >
                            {icon}
                        </IconContainer>
                    )}
                    {text}
                </button>
            </Frame>
        )
    }
}
