import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import * as QRCode from "qrcode";
import * as tinyColor from "tinycolor2";

const style: React.CSSProperties = {
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  color: "#8855FF",
  background: "rgba(136, 85, 255, 0.1)",
  overflow: "hidden"
};

// Define type of property
interface Props {
  text: string;
}

export class QRGen extends React.Component<Props> {
  constructor(props) {
    super(props);
    this.wrapper = null;
    this.canvas = null;
    this.ctx = null;
  }

  // Set default properties
  static defaultProps = {
    text:"https://ourfir.es"
    version: 4,
    error: "medium",
    mask: 4,
    margin: 4,
    scale: 4,
    foreground:"#000000FF",
    background:"#FFFFFFFF"

  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    text: { type: ControlType.String, title: "Text" }
    version: { type: ControlType.Number, title: "Version", min: 1, max: 40 }
    error:  {
      type: ControlType.Enum,
      options: ["low", "medium", "quartile", "high"],
      optionTitles: ["low", "medium", "quartile", "high"],
      title: "Error Correction Level"
    },
    mask: { type: ControlType.Number, title: "Mask Pattern", min: 0, max: 7 },
    margin: { type: ControlType.Number, title: "Padding", min: 0},
    foreground: {type: ControlType.Color, title: "Foreground"},
    background: {type: ControlType.Color, title: "Background"},

    // scale: { type: ControlType.Number, title: "Scale", min: 1}
  };

  componentDidMount() {

    this.createCanvas();
    this.generateQR();
  }

  componentWillReceiveProps() {

    this.generateQR();
  }

  createCanvas(){

    this.canvas = document.createElement("canvas");
    this.wrapper.appendChild(this.canvas);

    this.ctx = this.canvas.getContext("2d");

    this.canvas.width = this.props.width;
    this.canvas.height = this.props.height;
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

  }

  generateQR(text) {
    // Flush the canvas
    this.canvas.width = this.props.width;
    this.canvas.height = this.props.height;
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);


    let foreground = tinyColor(this.props.foreground);
    let background = tinyColor(this.props.background);
    const color = {
      dark: foreground.toHex8String(),
      light: background.toHex8String(),
    }



    const options = {
      version: this.props.version,
      errorCorrectionLevel: this.props.error,
      maskPattern: this.props.mask,
      margin: this.props.margin,
      scale: this.props.scale,
      width: this.canvas.width,
      color: color
    };

    const _generateQR = async (text, opt) => {
      try {
        await QRCode.toCanvas(this.canvas, this.props.text, opt);
      } catch (err) {
        console.error(err);
      }
    };
    _generateQR("does it work?!?", options);
  }



  render() {
    return (
      <div
        style={style}
        ref={wrapper => {
          this.wrapper = wrapper;
        }}
      />
    );
  }
}
