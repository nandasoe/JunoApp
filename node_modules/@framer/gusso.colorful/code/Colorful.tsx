import * as React from 'react'
import { Frame, ControlType } from 'framer'
import { toP3 } from './Utils'
import { baseColor } from './EmptyState'

export const Colorful = props => {
  const fill = props.fill.map(color => toP3(color))

  return (
    <Frame
      {...props}
      borderWidth={
        props.borderPerSide
          ? {
              top: props.borderTop,
              bottom: props.borderBottom,
              left: props.borderLeft,
              right: props.borderRight,
            }
          : props.border
      }
      borderColor={toP3(props.borderColor)}
      shadows={
        props.shadow != 'none' && [
          {
            inset: props.shadow == 'inner',
            x: props.shadowX,
            y: props.shadowY,
            color: toP3(props.shadowColor),
            blur: props.shadowBlur,
            spread: 0,
          },
        ]
      }
      style={{
        background: `linear-gradient(
          ${props.fillAngle - 180}deg,
          ${
            fill.length < 1
              ? ['transparent', 'transparent']
              : fill.length == 1
              ? [fill[0], fill[0]]
              : fill
          })`,
      }}
    >
      {' '}
    </Frame>
  )
}

Colorful.propertyControls = {
  border: {
    title: 'Border',
    type: ControlType.FusedNumber,
    toggleKey: 'borderPerSide',
    toggleTitles: ['Border', 'Border per side'],
    valueKeys: ['borderTop', 'borderRight', 'borderBottom', 'borderLeft'],
    valueLabels: ['T', 'R', 'B', 'L'],
    min: 0,
  },

  borderColor: {
    title: 'Border Color',
    type: ControlType.Color,
    hidden(props) {
      return props.borderPerSide
        ? !props.borderTop &&
            !props.borderRight &&
            !props.borderBottom &&
            !props.borderLeft
        : !props.border
    },
  },

  shadow: {
    title: 'Shadow',
    type: ControlType.SegmentedEnum,
    options: ['outer', 'inner', 'none'],
    optionTitles: ['Outer', 'Inner', 'None'],
  },

  shadowX: {
    title: 'Shadow X',
    type: ControlType.Number,
    min: 0,
    displayStepper: true,
    hidden(props) {
      return props.shadow == 'none'
    },
  },

  shadowY: {
    title: 'Shadow Y',
    type: ControlType.Number,
    min: 0,
    displayStepper: true,
    hidden(props) {
      return props.shadow == 'none'
    },
  },

  shadowBlur: {
    title: 'Shadow Blur',
    type: ControlType.Number,
    min: 0,
    max: 100,
    hidden(props) {
      return props.shadow == 'none'
    },
  },

  shadowColor: {
    type: ControlType.Color,
    title: 'Shadow Tint',
    hidden(props) {
      return props.shadow == 'none'
    },
  },

  fill: {
    title: 'Fill',
    type: ControlType.Array,
    propertyControl: {
      type: ControlType.Color,
      defaultValue: 'white',
    },
  },

  fillAngle: {
    title: 'Fill Angle',
    type: ControlType.Number,
    min: 0,
    max: 360,
    hidden(props) {
      return props.fill.filter(fill => fill.enabled).length < 2
    },
  },
}

Colorful.defaultProps = {
  width: 150,
  height: 150,

  fill: [`rgb(${baseColor})`],
  fillAngle: 0,

  borderPerSide: false,
  border: 0,
  borderTop: 0,
  borderRight: 0,
  borderBottom: 0,
  borderLeft: 0,
  borderColor: '#222222',

  shadow: 'none',
  shadowX: 0,
  shadowY: 2,
  shadowBlur: 5,
  shadowColor: 'rgba(0, 0, 0, 0.25)',
}
