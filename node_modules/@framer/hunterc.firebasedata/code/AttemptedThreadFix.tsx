import * as React from "react"
import {
    Scroll,
    Stack,
    useAnimation,
    motion,
    Color,
    Frame,
    RenderTarget,
} from "framer"
import { useState, useRef, useLayoutEffect } from "react"
import { getUserID, isChrome } from "./Utils"

const customTransition = { type: "spring", stiffness: 300, damping: 40 }

declare global {
    interface Window {
        chatMessageCount: number
        chatInitialScroll: number
    }
}

function ChatThread(props) {
    const { messages, darkMode, accentColor } = props
    const firstMessageRef = useRef<HTMLDivElement>(null)
    const lastMessageRef = useRef<HTMLDivElement>(null)
    const mountTime = useRef(Date.now())
    const [scrollHeight, setScrollHeight] = useState(0)
    const scrollControls = useAnimation()
    const renderedOnce = useRef(false)

    const scrollInnerEl = useRef<HTMLDivElement>(null)

    const messageRefs: {
        current: Array<React.RefObject<HTMLDivElement>>
    } = useRef([...Array(messages.length)].map(() => React.createRef()))

    console.log("Render", messageRefs.current)

    useLayoutEffect(() => {
        console.log(messages)
        if (messageRefs.current[0]) {
            console.log("FUCK")
            const top = messageRefs.current[0].current
                ? messageRefs.current[0].current.offsetTop
                : 0

            const bottom = messageRefs.current[messages.length - 1].current
                ? messageRefs.current[messages.length - 1].current.offsetTop +
                  messageRefs.current[messages.length - 1].current.offsetHeight
                : 0

            console.log(top + bottom)
            // console.log("mom")

            scrollControls.start({
                y: -(top + bottom) + props.height,
                transition: {
                    type: "spring",
                    damping: 30,
                    stiffness: 200,
                },
            })
        }
    })

    return (
        <Frame
            animate={{
                background: darkMode ? "#1A1A1A" : "#ffffff",
            }}
            transition={customTransition}
            initial={false}
            borderRadius={18}
            size="100%"
            ref={scrollInnerEl}
        >
            <Scroll
                width={"calc(100% - 64px)"}
                center
                height={"100%"}
                // contentHeight={scrollHeight}
                scrollAnimate={scrollControls}
                initial={{
                    opacity:
                        RenderTarget.current() === RenderTarget.canvas ? 1 : 0,
                }}
                transition={{ duration: 0.15 }}
                animate={{ opacity: messages.length > 0 ? 1 : 0 }}
            >
                <Stack
                    size={"100%"}
                    gap={0}
                    style={{
                        border: "1px solid red",
                    }}
                >
                    {messages.map(
                        ({ author = 0, text, timestamp = 0 }, index) => {
                            const fromLoggedInUser = author === getUserID()
                            const isPastMessage = mountTime.current > timestamp
                            const prevMessageAuthor =
                                messages[index - 1] &&
                                messages[index - 1].author
                            const nextMessageAuthor =
                                messages[index + 1] &&
                                messages[index + 1].author

                            const isFirstMessage = prevMessageAuthor !== author
                            const isLastMessage = nextMessageAuthor !== author

                            const [big, small] = [24, 8]
                            const messageBorderRadius = `
                        ${isFirstMessage || fromLoggedInUser ? big : small}px
                        ${isFirstMessage || !fromLoggedInUser ? big : small}px 
                        ${isLastMessage || !fromLoggedInUser ? big : small}px 
                        ${isLastMessage || fromLoggedInUser ? big : small}px`

                            return (
                                <Frame
                                    width={"100%"}
                                    key={index}
                                    height={null}
                                    ref={messageRefs.current[index]}
                                    style={{ display: "flex" }}
                                >
                                    <motion.div
                                        style={{
                                            marginLeft: fromLoggedInUser
                                                ? "auto"
                                                : 0,
                                            scale: 0,
                                        }}
                                        initial={{
                                            scale: !isPastMessage ? 0 : 1,
                                        }}
                                        animate={{
                                            scale: 1,
                                            transition: {
                                                type: "spring",
                                                damping: 40,
                                                stiffness: 600,
                                            },
                                        }}
                                    >
                                        <Frame
                                            animate={{
                                                backgroundColor: fromLoggedInUser
                                                    ? accentColor
                                                    : darkMode
                                                    ? "#5E5E5E"
                                                    : "#f0f0f0",
                                                color:
                                                    fromLoggedInUser || darkMode
                                                        ? "#fff"
                                                        : "#333",
                                            }}
                                            transition={customTransition}
                                            initial={false}
                                            style={{
                                                ...messageStyle,
                                                height: "unset",
                                                position: "relative",
                                                borderRadius: messageBorderRadius,
                                                textAlign: "left",
                                                letterSpacing: isChrome
                                                    ? "-0.3px"
                                                    : 0,
                                                marginTop: isFirstMessage
                                                    ? 18
                                                    : 2,
                                            }}
                                        >
                                            {text}
                                        </Frame>
                                    </motion.div>
                                </Frame>
                            )
                        }
                    )}
                </Stack>
            </Scroll>
        </Frame>
    )
}

ChatThread.defaultProps = {
    width: 480,
    height: 465,
    accentColor: "#FFAA00",
    darkMode: false,
    messages: [
        { text: "Hey, hows it going?", author: 0 },
        { text: "It's so nice out", author: 0 },
        { text: "I'm great! How are you?", author: getUserID() },
    ],
}

const messageStyle: React.CSSProperties = {
    display: "inline-flex",
    overflow: "hidden",
    placeItems: "center",
    fontSize: 16,
    fontWeight: 500,
    overflowWrap: "break-word",
    wordWrap: "break-word",
    hyphens: "auto",
    lineHeight: 1.25,
    // background: "#999",
    color: "#fff",
    borderRadius: 20,
    padding: "12px 18px",
    width: "auto",
    fontFamily:
        '".SFNSDisplay-Medium", "SFProDisplay-Medium", "SFUIDisplay-Medium", ".SFUIDisplay-Medium",-apple-system, BlinkMacSystemFont, sans-serif',
    maxWidth: 250,
}
